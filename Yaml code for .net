    steps:
     - task: AzureRmWebAppDeployment@4
       inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: 'Malik-Service-connection'
        appType: 'webApp'
        WebAppName: 'Dev-ev'
        packageForLinux: '$(Build.ArtifactStagingDirectory)/drop/*.zip'
    steps:
     - task: AzureRmWebAppDeployment@4
       inputs:
         ConnectionType: 'AzureRM'
         azureSubscription: 'Malik-Service-connection'
         appType: 'webApp'
         WebAppName: 'Prod-ev'
         packageForLinux: '$(Build.ArtifactStagingDirectory)/drop/*.zip'
steps:
  - task: AzureRmWebAppDeployment@4
    inputs:
      ConnectionType: 'AzureRM'
      azureSubscription: 'Malik-Service-connection'
      appType: 'webApp'
      WebAppName: 'Qa-ev'
      packageForLinux: '$(Build.ArtifactStagingDirectory)/drop/*.zip'
    steps:
     - task: DownloadBuildArtifacts@0
       displayName: 'Download build artifacts'
       inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
parameters:
  - name: env
    type: string
    default: Prod
    values:
      - Dev
      - Qa
      - Prod
  - name: refs
    type: string
    default: refs/heads/Dev
    values:
      - refs/heads/Dev
      - refs/heads/Qa
      - refs/heads/Prod

resources:
   repositories: 
   - repository: Dot-net-application
     type: git
     name: Malik/Dot-net-application
     ref: ${{parameters.refs}}

trigger:
- none

pool:
  vmImage: 'windows-latest'
variables:
- template: Variables.yaml

stages:
- template: build.yaml

- stage: DeployDev
  dependsOn: Build
  displayName: Deploy Dev
  jobs:
  - job: 
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - template: Download-artifact.yaml
    - template: Deploy-dev.yaml
    - template: Download-artifact.yaml
    - template: Deploye-Qa.yaml
    - template: Download-artifact.yaml
    - template: Deploye-Prod.yaml
variables:
  solution: '**/*.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    displayName: 'Build Job'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: '$(solution)'
        feedsToUse: 'select'
        vstsFeed: 'MyNuGetFeed'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project'
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project'
      inputs:
        command: 'publish'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish build artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
